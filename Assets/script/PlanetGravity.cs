using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class GravityPlanet : MonoBehaviour
{
    public float gravitationalConstant = 0.01f; // ‚úÖ ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏£‡∏á‡πÇ‡∏ô‡πâ‡∏°‡∏ñ‡πà‡∏ß‡∏á (G)
    public float damageDistance = 3f; // ‚úÖ ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏î HP
    public int damagePerSecond = 1; // ‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô HP ‡∏ó‡∏µ‡πà‡∏•‡∏î‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    private List<Rigidbody> affectedObjects = new List<Rigidbody>();

    void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Player"))
        {
            Rigidbody rb = other.GetComponent<Rigidbody>();
            if (rb != null && !affectedObjects.Contains(rb))
            {
                affectedObjects.Add(rb);
                StartCoroutine(DamageOverTime(other.GetComponent<CarController>()));
            }
        }
    }

    void OnTriggerExit(Collider other)
    {
        if (other.CompareTag("Player"))
        {
            Rigidbody rb = other.GetComponent<Rigidbody>();
            if (rb != null && affectedObjects.Contains(rb))
            {
                affectedObjects.Remove(rb);
            }
        }
    }

    void FixedUpdate()
    {
        foreach (Rigidbody rb in affectedObjects)
        {
            if (rb == null) continue;

            Vector3 direction = (transform.position - rb.position);
            float distance = direction.magnitude;

            if (distance > 0.5f) // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error ‡πÅ‡∏£‡∏á‡πÇ‡∏ô‡πâ‡∏°‡∏ñ‡πà‡∏ß‡∏á‡πÄ‡∏õ‡πá‡∏ô infinity
            {
                float forceMagnitude = gravitationalConstant * (rb.mass * 1000f) / Mathf.Pow(distance, 2);
                rb.AddForce(direction.normalized * forceMagnitude, ForceMode.Acceleration);
            }
        }
    }

    IEnumerator DamageOverTime(CarController car)
    {
        while (car != null && affectedObjects.Contains(car.GetComponent<Rigidbody>()))
        {
            float distance = Vector3.Distance(transform.position, car.transform.position);
            if (distance < damageDistance)
            {
                car.TakeDamage(damagePerSecond);
                Debug.Log("üî• ‡∏£‡∏ñ‡πÉ‡∏Å‡∏•‡πâ‡∏î‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ! HP ‡πÄ‡∏´‡∏•‡∏∑‡∏≠: " + car.currentHP);
            }
            yield return new WaitForSeconds(1f);
        }
    }
}
